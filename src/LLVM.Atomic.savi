:enum LLVM.Atomic.Ordering
  :: A load or store which is not atomic.
  :member NotAtomic 0

  :: Lowest level of atomicity, guarantees somewhat sane results, lock free.
  :member Unordered 1

  :: Guarantees that if you take all the operations affecting a specific
  :: address, a consistent ordering exists.
  :member Monotonic 2

  :: Acquire provides a barrier of the sort necessary to acquire a lock
  :: to access other memory with normal loads and stores.
  :member Acquire 4

  :: Release is similar to Acquire, but with a barrier of the sort necessary
  :: to release a lock.
  :member Release 5

  :: Provides both an Acquire and a Release barrier (for fences and
  :: operatios which both read and write memory).
  :member AcquireRelease 6

  :: Provides Acquire semantics for loads and Release semantics for stores.
  :: Additionally it guarantees that a total ordering exists between all
  :: SequentiallyConsistent operations.
  :member SequentiallyConsistent 7

:enum LLVM.Atomic.RMWBinOp
  :: Set the new value and return the one old.
  :member Xchg 0

  :: Add a value and return the old one.
  :member Add 1

  :: Subtract a value and return the old one.
  :member Sub 2

  :: And a value and return the old one.
  :member And 3

  :: Not-And a value and return the old one.
  :member Nand 4

  :: Or a value and return the old one.
  :member Or 5

  :: Xor a value and return the old one.
  :member Xor 6

  :: Sets the value if it's greater than the original using a signed comparison
  :: and return the old one.
  :member Max 7

  :: Sets the value if it's lesser than the original using a signed comparison
  :: and return the old one.
  :member Min 8

  :: Sets the value if it's greater than the original using an unsigned
  :: comparison and return the old one.
  :member UMax 9

  :: Sets the value if it's lesser than the original using an unsigned
  :: comparison and return the old one.
  :member UMin 10

  :: Add a floating point value and return the old one.
  :member FAdd 11

  :: Subtract a floating point value and return the old one.
  :member FSub 12

  :: Sets the value if it's greater than the original using a floating point
  :: comparison and return the old one.
  :member FMax 13

  :: Sets the value if it's lesser than the original using a floating point
  :: comparison and return the old one.
  :member FMin 14

  :: Increments the value, wrapping back to zero when incremented
  :: above input value.
  :member UIncWrap 15

  :: Decrements the value, wrapping back to the input value when decremented
  :: below zero.
  :member UDecWrap 16

